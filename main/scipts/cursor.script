DRAGGING = false

function init(self)
	msg.post(".", "acquire_input_focus")

	self.collision_id = nil
	self.dragged_id = nil
	self.dragged_pos = nil
	self.pressed = false
	self.touchedGroup = nil

	self.action_pos = go.get_position()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if not self.collision_id or
		go.get_position(self.collision_id).z < message.other_position.z then
			self.collision_id = message.other_id
			self.touchedGroup = message.other_group
		end
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.collision_id = nil	
end

function on_input(self, action_id, action)
	self.action_pos = vmath.vector3(action.x, action.y, 0.1)
	local blockDropped = self.dragged_id
	go.set_position(self.action_pos)

	if action.pressed then
		msg.post("#collisionobject", "enable")
		self.pressed = true
	elseif action.released then
		msg.post("#collisionobject", "disable")

		self.pressed = false
		self.dragged_id = nil
		self.dragging = false
		DRAGGING = false

		if blockDropped ~= nil then
			msg.post(blockDropped, "releasedBlock")
		end
	end

	if self.pressed and self.collision_id and not self.dragged_id then
		self.dragged_id = self.collision_id
		self.dragged_pos = self.action_pos

		msg.post(self.dragged_id, "draggingBlock")
	end

	if self.dragged_id and vmath.length(self.dragged_pos - self.action_pos) > 15 then
		self.dragging = true
		DRAGGING = true
	end

	if self.dragging then
		local tPos = vmath.vector3(self.action_pos.x, self.action_pos.y, 0.1)
		go.set_position(tPos, self.dragged_id)
	end
end